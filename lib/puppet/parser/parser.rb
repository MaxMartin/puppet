#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 866)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:

# $Id$
...end grammar.ra/module_eval...
##### State transition tables begin ###

racc_action_table = [
   256,   257,   228,    63,   327,    64,   156,    54,    82,   356,
  -166,   245,   176,   205,   210,   254,    37,   357,    65,   244,
    38,  -168,   201,   203,   206,   209,   184,    11,   255,   241,
   242,   158,    54,   251,    72,    75,    72,    75,   102,   117,
   106,  -170,    62,   194,   230,    58,   204,   208,    60,   306,
   213,   196,   197,   198,   200,   202,    97,   207,   211,    72,
    75,   241,   242,   102,   199,   106,   163,    71,    59,   307,
    58,    83,    86,    60,   193,    92,    54,   162,    72,    75,
    78,   100,   169,   163,    89,    72,    75,    94,   308,   102,
   163,   106,    71,    59,   162,    59,    83,    86,    59,   169,
    92,   162,   311,    72,    75,    78,   169,    97,   181,    89,
   353,    71,   228,   352,    58,    83,   269,    60,    71,    92,
    59,   345,    83,    86,   137,   184,    92,  -171,    89,    72,
    75,    78,   100,   246,   368,    89,    71,    59,    94,    59,
    83,    86,   309,   173,    92,   314,    59,   163,    76,    78,
    72,    75,  -167,    89,   102,   310,   106,    37,   162,   173,
   218,   127,    71,   169,    59,   220,    83,   269,    11,    14,
    92,    63,    97,   152,    37,   137,    72,    75,   127,    89,
   102,   319,   106,    71,   218,    11,    14,    83,    86,   220,
    59,    92,    72,    75,    72,    75,    78,   100,   270,   279,
    89,   349,   278,    94,   353,   207,   211,   352,   320,    71,
  -169,    59,   199,    83,    86,   197,   198,    92,    72,    75,
   207,   211,    78,  -169,    37,    71,    89,   199,    38,    83,
   269,  -167,   193,    92,  -166,    11,    14,    59,   137,    72,
    75,   272,    89,   102,   182,   106,    37,   207,   211,  -186,
    38,    71,   181,    59,   199,    83,    86,    11,   337,    92,
   231,    97,   339,    76,    78,    72,    75,    37,    89,    82,
    48,    38,    71,    48,   323,   176,    83,    86,    11,    59,
    92,   342,    46,    47,   184,    78,   100,    74,  -168,    89,
    72,    75,    94,  -172,   102,   346,   106,  -173,    71,   175,
    59,    59,    83,    86,   240,  -171,    92,  -170,   241,   242,
    76,    78,    97,   197,   198,    89,    72,    75,   207,   211,
   102,   214,   106,    71,    64,   199,    59,    83,    86,   276,
   215,    92,   217,   246,   275,   173,    78,   100,    97,    82,
    89,    72,    75,    94,   155,   102,   122,   106,   152,    71,
   223,    59,  -168,    83,    86,   249,   277,    92,   176,   246,
   247,   122,    78,   100,   225,  -166,    89,    72,    75,    94,
   117,   102,   226,   106,    71,  -169,   271,    59,    83,    86,
   246,   247,    92,   -21,   -21,   -21,   -21,    78,   226,    97,
  -167,    89,    72,    75,    52,  -168,   102,  -166,   106,  -169,
    71,  -167,    59,  -171,    83,    86,   366,   152,    92,   -23,
   -23,   -23,   -23,    78,   100,   228,   226,    89,    72,    75,
    94,    50,   102,   373,   106,    71,    49,   375,    59,    83,
    86,   229,  -221,    92,   237,   378,    72,    75,    78,    40,
    97,    39,    89,   355,    44,    45,    41,    42,   231,   234,
   nil,    71,   nil,    59,   nil,    83,    86,   nil,   nil,    92,
    44,    45,    41,    42,    78,   100,    72,    75,    89,    71,
   102,    94,   106,    83,   269,   nil,   nil,    92,   nil,    59,
   nil,   nil,   137,   nil,   nil,   nil,    89,   nil,    97,   nil,
   nil,   nil,    72,    75,   nil,   nil,   102,    59,   106,    71,
   nil,   nil,   nil,    83,    86,   nil,   nil,    92,   nil,   nil,
   nil,   nil,    78,   100,    97,   nil,    89,   nil,   nil,    94,
   nil,   nil,    72,    75,   nil,    71,   102,    59,   106,    83,
    86,   nil,   nil,    92,   nil,   nil,   nil,   nil,    78,   100,
   nil,   nil,    89,   nil,    97,    94,   nil,   nil,    72,    75,
   nil,   nil,   102,    59,   106,    71,   nil,   nil,   nil,    83,
    86,   nil,   nil,    92,   nil,   nil,    72,    75,    78,   100,
    97,   nil,    89,    72,    75,    94,   nil,   102,   nil,   106,
   nil,    71,   nil,    59,   nil,    83,    86,    72,    75,    92,
   nil,   102,   nil,   nil,    78,   100,   nil,   nil,    89,    71,
   nil,    94,   nil,    83,   269,   nil,    71,    92,   nil,    59,
    83,    86,   137,   nil,    92,   nil,    89,   nil,   nil,    78,
    71,   nil,   nil,    89,    83,   143,   nil,    59,    92,   nil,
   nil,   nil,   nil,   137,    59,    72,    75,    89,   nil,   102,
   nil,   106,   213,   196,   197,   198,   200,   202,    59,   207,
   211,   nil,   213,   196,   197,   198,   199,    97,   nil,   207,
   211,    72,    75,   nil,   nil,   102,   199,   106,    71,   nil,
   nil,   nil,    83,    86,   nil,   nil,    92,   nil,   nil,   nil,
   nil,    78,   100,    97,   nil,    89,   nil,   nil,    94,   nil,
   nil,    72,    75,   nil,    71,   102,    59,   106,    83,    86,
   nil,   nil,    92,   nil,   nil,   nil,   nil,    78,   100,   nil,
   nil,    89,   nil,    97,    94,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    59,   nil,    71,   nil,   nil,   nil,    83,    86,
    72,    75,    92,   nil,   102,   189,   106,    78,   100,   nil,
   nil,    89,   nil,   nil,    94,   nil,   nil,   nil,   nil,    72,
    75,   nil,    59,   102,   nil,   106,    72,    75,   nil,   nil,
   102,   nil,   106,    71,   nil,   nil,   nil,    83,    86,   nil,
   nil,    92,   nil,   nil,   nil,   nil,    78,   nil,    97,   nil,
    89,   nil,    71,   nil,   nil,   nil,    83,    86,   nil,    71,
    92,    59,   nil,    83,    86,    78,   nil,    92,   nil,    89,
   nil,   nil,    78,   100,   nil,   nil,    89,    72,    75,    94,
    59,   102,   nil,   106,   nil,   nil,   nil,    59,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    72,    75,   nil,    97,
   102,   nil,   106,    72,    75,   nil,   nil,   102,   nil,   106,
    71,   nil,   nil,   nil,    83,    86,   nil,   nil,    92,   nil,
   nil,   nil,   nil,    78,   100,    97,   nil,    89,   nil,    71,
    94,   nil,   nil,    83,    86,   nil,    71,    92,    59,   nil,
    83,    86,    78,   nil,    92,   nil,    89,   nil,   nil,    78,
   100,   nil,   nil,    89,    72,    75,    94,    59,   102,   nil,
   106,   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    72,    75,   nil,    97,   nil,   nil,    72,
    75,   nil,   nil,   nil,   nil,   nil,   nil,    71,   nil,   nil,
   nil,    83,    86,   nil,   nil,    92,   340,   nil,   nil,   nil,
    78,   100,   177,   nil,    89,   nil,    71,    94,   nil,   nil,
    83,    86,    71,   nil,    92,    59,    83,    86,    76,    78,
    92,   nil,   nil,    89,    76,    78,    72,    75,   nil,    89,
   102,   nil,   106,   nil,    59,   nil,   213,   196,   197,   198,
    59,   nil,   nil,   207,   211,    72,    75,   nil,    97,   102,
   199,   106,    72,    75,   nil,   nil,   nil,   nil,   nil,    71,
   nil,   nil,   nil,    83,    86,   nil,   nil,    92,   nil,   nil,
    72,    75,    78,   100,   nil,   nil,    89,   nil,    71,    94,
   nil,   nil,    83,    86,   nil,    71,    92,    59,   nil,    83,
   269,    78,   nil,    92,   nil,    89,   nil,   nil,   137,   nil,
   nil,   nil,    89,    71,   nil,   nil,    59,    83,   269,   nil,
   nil,    92,   nil,    59,   nil,   nil,   137,    72,    75,   nil,
    89,   102,   nil,   106,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    59,   nil,   nil,   nil,   nil,    72,    75,   nil,    97,
   102,   nil,   106,    72,    75,   nil,   nil,   102,   nil,   106,
    71,   nil,   nil,   nil,    83,    86,   nil,   nil,    92,   nil,
   nil,   nil,   nil,    78,   100,    72,    75,    89,   nil,    71,
    94,   nil,   nil,    83,    86,   nil,    71,    92,    59,   nil,
    83,    86,    78,   nil,    92,   nil,    89,   nil,   nil,    78,
    72,    75,   nil,    89,   102,   nil,   106,    59,    71,   nil,
   nil,   nil,    83,   269,    59,   nil,    92,   nil,    72,    75,
   nil,   137,   102,   nil,   106,    89,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    71,   nil,   nil,    59,    83,    86,   nil,
    97,    92,   nil,    72,    75,   nil,    78,   102,   nil,   106,
    89,    71,   nil,    72,    75,    83,    86,   102,   nil,    92,
   nil,    59,   nil,   nil,    78,   100,   nil,   nil,    89,   nil,
   nil,    94,   nil,   nil,   nil,   nil,    71,   nil,   nil,    59,
    83,    86,   nil,   nil,    92,   nil,    71,   nil,   nil,    78,
    83,   269,   nil,    89,    92,   nil,    72,    75,   nil,   137,
   102,   nil,   106,    89,    59,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    59,    72,    75,   nil,    97,   102,
   nil,   106,    72,    75,   nil,   nil,   102,   nil,   106,    71,
   nil,   nil,   nil,    83,    86,   nil,   nil,    92,   nil,   nil,
   nil,   nil,    78,   100,    97,   nil,    89,   nil,    71,    94,
   nil,   nil,    83,    86,   nil,    71,    92,    59,   nil,    83,
    86,    78,   nil,    92,   nil,    89,   nil,   nil,    78,   100,
   212,   nil,    89,   nil,   nil,    94,    59,   nil,   nil,   205,
   210,   nil,   nil,    59,   nil,   nil,   nil,   nil,   201,   203,
   206,   209,   nil,   nil,   205,   210,   nil,   nil,   nil,   nil,
   nil,   nil,   274,   201,   203,   206,   209,   nil,   nil,   nil,
   nil,   nil,   204,   208,   nil,   nil,   213,   196,   197,   198,
   200,   202,   nil,   207,   211,   nil,   nil,   204,   208,   nil,
   199,   213,   196,   197,   198,   200,   202,   nil,   207,   211,
   205,   210,   nil,   nil,   nil,   199,   nil,   nil,   nil,   201,
   203,   206,   209,   nil,   nil,   205,   210,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   201,   203,   206,   209,   nil,   nil,
   nil,   nil,   nil,   nil,   208,   nil,   nil,   213,   196,   197,
   198,   200,   202,   nil,   207,   211,   nil,   nil,   204,   208,
   nil,   199,   213,   196,   197,   198,   200,   202,   nil,   207,
   211,   205,   210,   nil,   nil,   nil,   199,   nil,   nil,   nil,
   201,   203,   206,   209,   nil,   nil,   205,   210,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   201,   203,   206,   209,   nil,
   nil,   nil,   nil,   nil,   204,   208,   nil,   nil,   213,   196,
   197,   198,   200,   202,   nil,   207,   211,   nil,   nil,   nil,
   nil,   nil,   199,   213,   196,   197,   198,   200,   202,   nil,
   207,   211,   205,   210,   nil,   nil,   nil,   199,   nil,   nil,
   nil,   201,   203,   206,   209,   nil,   nil,   nil,   210,   nil,
   213,   196,   197,   198,   200,   202,   201,   207,   211,   nil,
   nil,   nil,   nil,   nil,   199,   204,   208,   210,   nil,   213,
   196,   197,   198,   200,   202,   201,   207,   211,   nil,   nil,
   nil,   nil,   210,   199,   213,   196,   197,   198,   200,   202,
   201,   207,   211,   nil,   nil,   nil,   nil,   nil,   199,   nil,
   nil,   210,   nil,   213,   196,   197,   198,   200,   202,   201,
   207,   211,   nil,   nil,   nil,   nil,   nil,   199,   213,   196,
   197,   198,   200,   202,   nil,   207,   211,   nil,   nil,   384,
   nil,   nil,   199,   nil,   nil,   nil,   nil,   213,   196,   197,
   198,   200,   202,   nil,   207,   211,   nil,   nil,   297,   nil,
    26,   199,    33,     1,   nil,     7,    12,   nil,    17,   nil,
    23,   nil,    29,   nil,     3,   nil,   nil,    11,    14,    26,
   305,    33,     1,   nil,     7,    12,   nil,    17,   nil,    23,
   nil,    29,   nil,     3,   nil,   nil,    11,    14,   nil,   383,
   nil,    26,   nil,    33,     1,   nil,     7,    12,   nil,    17,
   nil,    23,   nil,    29,   nil,     3,   nil,   nil,    11,    14,
    26,   325,    33,     1,   nil,     7,    12,   nil,    17,   nil,
    23,   nil,    29,   nil,     3,   nil,   nil,    11,    14,   nil,
   382,   nil,    26,   nil,    33,     1,   nil,     7,    12,   nil,
    17,   nil,    23,   nil,    29,   nil,     3,   nil,   nil,    11,
    14,    26,   380,    33,     1,   nil,     7,    12,   nil,    17,
   nil,    23,   nil,    29,   nil,     3,   nil,   nil,    11,    14,
   nil,   376,   nil,    26,   nil,    33,     1,   nil,     7,    12,
   nil,    17,   nil,    23,   nil,    29,   nil,     3,   nil,   nil,
    11,    14,    26,   350,    33,     1,   nil,     7,    12,   nil,
    17,   nil,    23,   nil,    29,   nil,     3,   nil,   nil,    11,
    14,   nil,   358,   nil,    26,   nil,    33,     1,   nil,     7,
    12,   nil,    17,   nil,    23,   nil,    29,   nil,     3,   nil,
   nil,    11,    14,    26,   365,    33,     1,   nil,     7,    12,
   nil,    17,   nil,    23,   nil,    29,   nil,     3,   nil,   nil,
    11,    14,   nil,   364,   nil,    26,   nil,    33,     1,   nil,
     7,    12,   nil,    17,   nil,    23,   nil,    29,   nil,     3,
   nil,   nil,    11,    14,    26,   nil,    33,     1,   nil,     7,
    12,   nil,    17,   nil,    23,   nil,    29,   nil,     3,   nil,
   nil,    11,    14,    26,   nil,    33,     1,   nil,     7,    12,
   nil,    17,   nil,    23,   nil,    29,   nil,     3,   nil,   nil,
    11,    14,    26,   nil,    33,     1,   nil,     7,    12,   nil,
    17,   nil,    23,   nil,    29,   nil,     3,   nil,   nil,    11,
    14 ]

racc_action_check = [
   180,   180,   152,    22,   243,    22,    55,    17,    86,   301,
    81,   165,    96,   180,   180,   178,    12,   301,    22,   165,
    12,    95,   180,   180,   180,   180,    86,    12,   178,   243,
   243,    55,   156,   174,   208,   208,   106,   106,   208,   215,
   208,    91,    22,   106,   152,    17,   180,   180,    17,   218,
   180,   180,   180,   180,   180,   180,   208,   180,   180,   176,
   176,   174,   174,   176,   180,   176,    62,   208,    17,   219,
   156,   208,   208,   156,   106,   208,   158,    62,   369,   369,
   208,   208,    62,   239,   208,   205,   205,   208,   220,   205,
    65,   205,   176,   156,   239,   208,   176,   176,   211,   239,
   176,    65,   224,   181,   181,   176,    65,   205,   273,   176,
   350,   369,   143,   350,   158,   369,   369,   158,   205,   369,
   176,   273,   205,   205,   369,   143,   205,    90,   369,   356,
   356,   205,   205,   344,   344,   205,   181,   158,   205,   369,
   181,   181,   221,   226,   181,   227,   205,   163,   181,   181,
   352,   352,    87,   181,   352,   221,   352,   120,   163,   229,
   309,   120,   356,   163,   181,   309,   356,   356,   120,   120,
   356,    85,   352,   231,    43,   356,   342,   342,    43,   356,
   342,   232,   342,   352,   122,    43,    43,   352,   352,   122,
   356,   352,   182,   182,   278,   278,   352,   352,   182,   195,
   352,   278,   195,   352,   297,   281,   281,   297,   233,   342,
   103,   352,   281,   342,   342,   280,   280,   342,   184,   184,
   280,   280,   342,    84,    30,   182,   342,   280,    30,   182,
   182,   105,   278,   182,   101,    30,    30,   342,   182,   204,
   204,   184,   182,   204,    80,   204,     1,   282,   282,    78,
     1,   184,    77,   182,   282,   184,   184,     1,   250,   184,
   252,   204,   253,   184,   184,    23,    23,   234,   184,    23,
    71,   234,   204,     7,   234,    70,   204,   204,   234,   184,
   204,   264,     7,     7,   269,   204,   204,    23,    68,   204,
    26,    26,   204,   107,    26,   275,    26,    67,    23,    66,
   204,   207,    23,    23,   160,   108,    23,   109,   160,   160,
    23,    23,    26,   298,   298,    23,   196,   196,   298,   298,
   196,   114,   196,    26,   115,   298,    23,    26,    26,   188,
   119,    26,   121,   188,   188,    64,    26,    26,   196,   127,
    26,    29,    29,    26,    52,    29,    51,    29,    50,   196,
   132,    26,   133,   196,   196,   171,   192,   196,   135,   171,
   171,    36,   196,   196,   136,   138,   196,   213,   213,   196,
    33,   213,   139,   213,    29,   140,   183,   196,    29,    29,
   183,   183,    29,    28,    28,    28,    28,    29,   316,   213,
   142,    29,   306,   306,    16,   328,   306,   329,   306,   331,
   213,   332,    29,   333,   213,   213,   338,   175,   213,    35,
    35,    35,    35,   213,   213,   173,   172,   213,   197,   197,
   213,     9,   197,   353,   197,   306,     8,   357,   213,   306,
   306,   144,   368,   306,   157,   370,   299,   299,   306,     3,
   197,     2,   306,   299,    34,    34,    34,    34,   153,   154,
   nil,   197,   nil,   306,   nil,   197,   197,   nil,   nil,   197,
     4,     4,     4,     4,   197,   197,    39,    39,   197,   299,
    39,   197,    39,   299,   299,   nil,   nil,   299,   nil,   197,
   nil,   nil,   299,   nil,   nil,   nil,   299,   nil,    39,   nil,
   nil,   nil,   206,   206,   nil,   nil,   206,   299,   206,    39,
   nil,   nil,   nil,    39,    39,   nil,   nil,    39,   nil,   nil,
   nil,   nil,    39,    39,   206,   nil,    39,   nil,   nil,    39,
   nil,   nil,    46,    46,   nil,   206,    46,    39,    46,   206,
   206,   nil,   nil,   206,   nil,   nil,   nil,   nil,   206,   206,
   nil,   nil,   206,   nil,    46,   206,   nil,   nil,    47,    47,
   nil,   nil,    47,   206,    47,    46,   nil,   nil,   nil,    46,
    46,   nil,   nil,    46,   nil,   nil,   270,   270,    46,    46,
    47,   nil,    46,    48,    48,    46,   nil,    48,   nil,    48,
   nil,    47,   nil,    46,   nil,    47,    47,    49,    49,    47,
   nil,    49,   nil,   nil,    47,    47,   nil,   nil,    47,   270,
   nil,    47,   nil,   270,   270,   nil,    48,   270,   nil,    47,
    48,    48,   270,   nil,    48,   nil,   270,   nil,   nil,    48,
    49,   nil,   nil,    48,    49,    49,   nil,   270,    49,   nil,
   nil,   nil,   nil,    49,    48,   203,   203,    49,   nil,   203,
   nil,   203,   294,   294,   294,   294,   294,   294,    49,   294,
   294,   nil,   284,   284,   284,   284,   294,   203,   nil,   284,
   284,   209,   209,   nil,   nil,   209,   284,   209,   203,   nil,
   nil,   nil,   203,   203,   nil,   nil,   203,   nil,   nil,   nil,
   nil,   203,   203,   209,   nil,   203,   nil,   nil,   203,   nil,
   nil,   210,   210,   nil,   209,   210,   203,   210,   209,   209,
   nil,   nil,   209,   nil,   nil,   nil,   nil,   209,   209,   nil,
   nil,   209,   nil,   210,   209,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   209,   nil,   210,   nil,   nil,   nil,   210,   210,
   102,   102,   210,   nil,   102,   102,   102,   210,   210,   nil,
   nil,   210,   nil,   nil,   210,   nil,   nil,   nil,   nil,    63,
    63,   nil,   210,    63,   nil,    63,   202,   202,   nil,   nil,
   202,   nil,   202,   102,   nil,   nil,   nil,   102,   102,   nil,
   nil,   102,   nil,   nil,   nil,   nil,   102,   nil,   202,   nil,
   102,   nil,    63,   nil,   nil,   nil,    63,    63,   nil,   202,
    63,   102,   nil,   202,   202,    63,   nil,   202,   nil,    63,
   nil,   nil,   202,   202,   nil,   nil,   202,   100,   100,   202,
    63,   100,   nil,   100,   nil,   nil,   nil,   202,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   277,   277,   nil,   100,
   277,   nil,   277,   198,   198,   nil,   nil,   198,   nil,   198,
   100,   nil,   nil,   nil,   100,   100,   nil,   nil,   100,   nil,
   nil,   nil,   nil,   100,   100,   198,   nil,   100,   nil,   277,
   100,   nil,   nil,   277,   277,   nil,   198,   277,   100,   nil,
   198,   198,   277,   nil,   198,   nil,   277,   nil,   nil,   198,
   198,   nil,   nil,   198,   256,   256,   198,   277,   256,   nil,
   256,   nil,   nil,   nil,   198,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   254,   254,   nil,   256,   nil,   nil,    74,
    74,   nil,   nil,   nil,   nil,   nil,   nil,   256,   nil,   nil,
   nil,   256,   256,   nil,   nil,   256,   254,   nil,   nil,   nil,
   256,   256,    74,   nil,   256,   nil,   254,   256,   nil,   nil,
   254,   254,    74,   nil,   254,   256,    74,    74,   254,   254,
    74,   nil,   nil,   254,    74,    74,    75,    75,   nil,    74,
    75,   nil,    75,   nil,   254,   nil,   286,   286,   286,   286,
    74,   nil,   nil,   286,   286,   248,   248,   nil,    75,   248,
   286,   248,   245,   245,   nil,   nil,   nil,   nil,   nil,    75,
   nil,   nil,   nil,    75,    75,   nil,   nil,    75,   nil,   nil,
   244,   244,    75,    75,   nil,   nil,    75,   nil,   248,    75,
   nil,   nil,   248,   248,   nil,   245,   248,    75,   nil,   245,
   245,   248,   nil,   245,   nil,   248,   nil,   nil,   245,   nil,
   nil,   nil,   245,   244,   nil,   nil,   248,   244,   244,   nil,
   nil,   244,   nil,   245,   nil,   nil,   244,    97,    97,   nil,
   244,    97,   nil,    97,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   244,   nil,   nil,   nil,   nil,    82,    82,   nil,    97,
    82,   nil,    82,   199,   199,   nil,   nil,   199,   nil,   199,
    97,   nil,   nil,   nil,    97,    97,   nil,   nil,    97,   nil,
   nil,   nil,   nil,    97,    97,   214,   214,    97,   nil,    82,
    97,   nil,   nil,    82,    82,   nil,   199,    82,    97,   nil,
   199,   199,    82,   nil,   199,   nil,    82,   nil,   nil,   199,
   230,   230,   nil,   199,   230,   nil,   230,    82,   214,   nil,
   nil,   nil,   214,   214,   199,   nil,   214,   nil,   200,   200,
   nil,   214,   200,   nil,   200,   214,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   230,   nil,   nil,   214,   230,   230,   nil,
   200,   230,   nil,   228,   228,   nil,   230,   228,   nil,   228,
   230,   200,   nil,   225,   225,   200,   200,   225,   nil,   200,
   nil,   230,   nil,   nil,   200,   200,   nil,   nil,   200,   nil,
   nil,   200,   nil,   nil,   nil,   nil,   228,   nil,   nil,   200,
   228,   228,   nil,   nil,   228,   nil,   225,   nil,   nil,   228,
   225,   225,   nil,   228,   225,   nil,   201,   201,   nil,   225,
   201,   nil,   201,   225,   228,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   225,   308,   308,   nil,   201,   308,
   nil,   308,    94,    94,   nil,   nil,    94,   nil,    94,   201,
   nil,   nil,   nil,   201,   201,   nil,   nil,   201,   nil,   nil,
   nil,   nil,   201,   201,    94,   nil,   201,   nil,   308,   201,
   nil,   nil,   308,   308,   nil,    94,   308,   201,   nil,    94,
    94,   308,   nil,    94,   nil,   308,   nil,   nil,    94,    94,
   111,   nil,    94,   nil,   nil,    94,   308,   nil,   nil,   111,
   111,   nil,   nil,    94,   nil,   nil,   nil,   nil,   111,   111,
   111,   111,   nil,   nil,   186,   186,   nil,   nil,   nil,   nil,
   nil,   nil,   186,   186,   186,   186,   186,   nil,   nil,   nil,
   nil,   nil,   111,   111,   nil,   nil,   111,   111,   111,   111,
   111,   111,   nil,   111,   111,   nil,   nil,   186,   186,   nil,
   111,   186,   186,   186,   186,   186,   186,   nil,   186,   186,
   288,   288,   nil,   nil,   nil,   186,   nil,   nil,   nil,   288,
   288,   288,   288,   nil,   nil,   131,   131,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   131,   131,   131,   131,   nil,   nil,
   nil,   nil,   nil,   nil,   288,   nil,   nil,   288,   288,   288,
   288,   288,   288,   nil,   288,   288,   nil,   nil,   131,   131,
   nil,   288,   131,   131,   131,   131,   131,   131,   nil,   131,
   131,   130,   130,   nil,   nil,   nil,   131,   nil,   nil,   nil,
   130,   130,   130,   130,   nil,   nil,   292,   292,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   292,   292,   292,   292,   nil,
   nil,   nil,   nil,   nil,   130,   130,   nil,   nil,   130,   130,
   130,   130,   130,   130,   nil,   130,   130,   nil,   nil,   nil,
   nil,   nil,   130,   292,   292,   292,   292,   292,   292,   nil,
   292,   292,   124,   124,   nil,   nil,   nil,   292,   nil,   nil,
   nil,   124,   124,   124,   124,   nil,   nil,   nil,   293,   nil,
   285,   285,   285,   285,   285,   285,   293,   285,   285,   nil,
   nil,   nil,   nil,   nil,   285,   124,   124,   289,   nil,   124,
   124,   124,   124,   124,   124,   289,   124,   124,   nil,   nil,
   nil,   nil,   287,   124,   293,   293,   293,   293,   293,   293,
   287,   293,   293,   nil,   nil,   nil,   nil,   nil,   293,   nil,
   nil,   290,   nil,   289,   289,   289,   289,   289,   289,   290,
   289,   289,   nil,   nil,   nil,   nil,   nil,   289,   287,   287,
   287,   287,   287,   287,   nil,   287,   287,   nil,   nil,   381,
   nil,   nil,   287,   nil,   nil,   nil,   nil,   290,   290,   290,
   290,   290,   290,   nil,   290,   290,   nil,   nil,   212,   nil,
   381,   290,   381,   381,   nil,   381,   381,   nil,   381,   nil,
   381,   nil,   381,   nil,   381,   nil,   nil,   381,   381,   212,
   217,   212,   212,   nil,   212,   212,   nil,   212,   nil,   212,
   nil,   212,   nil,   212,   nil,   nil,   212,   212,   nil,   379,
   nil,   217,   nil,   217,   217,   nil,   217,   217,   nil,   217,
   nil,   217,   nil,   217,   nil,   217,   nil,   nil,   217,   217,
   379,   237,   379,   379,   nil,   379,   379,   nil,   379,   nil,
   379,   nil,   379,   nil,   379,   nil,   nil,   379,   379,   nil,
   375,   nil,   237,   nil,   237,   237,   nil,   237,   237,   nil,
   237,   nil,   237,   nil,   237,   nil,   237,   nil,   nil,   237,
   237,   375,   373,   375,   375,   nil,   375,   375,   nil,   375,
   nil,   375,   nil,   375,   nil,   375,   nil,   nil,   375,   375,
   nil,   363,   nil,   373,   nil,   373,   373,   nil,   373,   373,
   nil,   373,   nil,   373,   nil,   373,   nil,   373,   nil,   nil,
   373,   373,   363,   296,   363,   363,   nil,   363,   363,   nil,
   363,   nil,   363,   nil,   363,   nil,   363,   nil,   nil,   363,
   363,   nil,   304,   nil,   296,   nil,   296,   296,   nil,   296,
   296,   nil,   296,   nil,   296,   nil,   296,   nil,   296,   nil,
   nil,   296,   296,   304,   324,   304,   304,   nil,   304,   304,
   nil,   304,   nil,   304,   nil,   304,   nil,   304,   nil,   nil,
   304,   304,   nil,   320,   nil,   324,   nil,   324,   324,   nil,
   324,   324,   nil,   324,   nil,   324,   nil,   324,   nil,   324,
   nil,   nil,   324,   324,   320,   nil,   320,   320,   nil,   320,
   320,   nil,   320,   nil,   320,   nil,   320,   nil,   320,   nil,
   nil,   320,   320,    19,   nil,    19,    19,   nil,    19,    19,
   nil,    19,   nil,    19,   nil,    19,   nil,    19,   nil,   nil,
    19,    19,     0,   nil,     0,     0,   nil,     0,     0,   nil,
     0,   nil,     0,   nil,     0,   nil,     0,   nil,   nil,     0,
     0 ]

racc_action_pointer = [
  1832,   210,   426,   395,   396,   nil,   nil,   267,   418,   413,
   nil,   nil,   -20,   nil,   nil,   nil,   394,     5,   nil,  1813,
   nil,   nil,    -3,   263,   nil,   nil,   288,   nil,   319,   339,
   188,   nil,   nil,   368,   380,   345,   337,   nil,   nil,   464,
   nil,   nil,   nil,   138,   nil,   nil,   520,   546,   571,   585,
   308,   322,   344,   nil,   nil,    -6,   nil,   nil,   nil,   nil,
   nil,   nil,    42,   747,   295,    66,   291,   274,   265,   nil,
   269,   264,   nil,   nil,   907,   954,   nil,   240,   243,   nil,
   221,   -13,  1064,   nil,   200,   165,     2,   129,   nil,   nil,
   104,    18,   nil,   nil,  1240,    -2,     6,  1045,   nil,   nil,
   805,   211,   728,   187,   nil,   208,    34,   270,   282,   284,
   nil,  1282,   nil,   nil,   313,   316,   nil,   nil,   nil,   318,
   121,   324,   149,   nil,  1465,   nil,   nil,   333,   nil,   nil,
  1404,  1358,   343,   329,   nil,   352,   323,   nil,   342,   360,
   352,   nil,   367,   101,   411,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    -9,   436,   412,   nil,    30,   426,    74,   nil,
   258,   nil,   nil,   123,   nil,    -7,   nil,   nil,   nil,   nil,
   nil,   348,   404,   404,    11,   367,    57,   nil,     3,   nil,
    -4,   101,   190,   369,   216,   nil,  1297,   nil,   322,   nil,
   nil,   nil,   345,   nil,   nil,   190,   314,   416,   831,  1071,
  1136,  1214,   754,   633,   237,    83,   490,   238,    32,   659,
   689,    35,  1589,   365,  1093,    37,   nil,  1611,    34,    44,
    73,   130,   nil,   nil,    93,  1171,   103,   136,  1161,   119,
  1118,   133,   172,   200,   231,   nil,   nil,  1652,   nil,    59,
   nil,   nil,   nil,   -21,   998,   980,   nil,   nil,   973,   nil,
   249,   nil,   248,   255,   901,   nil,   882,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   270,   nil,   nil,   nil,   nil,   260,
   564,   nil,   nil,    96,   nil,   288,   nil,   824,   192,   nil,
   159,   144,   186,   nil,   598,  1446,   912,  1514,  1343,  1499,
  1533,   nil,  1419,  1480,   588,   nil,  1734,   173,   257,   434,
   nil,    -3,   nil,   nil,  1753,   nil,   390,   nil,  1233,   125,
   nil,   nil,   nil,   nil,   nil,   nil,   376,   nil,   nil,   nil,
  1794,   nil,   nil,   nil,  1775,   nil,   nil,   nil,   372,   374,
   nil,   376,   378,   380,   nil,   nil,   nil,   nil,   397,   nil,
   nil,   nil,   174,   nil,   122,   nil,   nil,   nil,   nil,   nil,
    79,   nil,   148,   415,   nil,   nil,   127,   419,   nil,   nil,
   nil,   nil,   nil,  1712,   nil,   nil,   nil,   nil,   423,    76,
   426,   nil,   nil,  1693,   nil,  1671,   nil,   nil,   nil,  1630,
   nil,  1570,   nil,   nil,   nil ]

racc_action_default = [
  -197,  -234,  -234,   -50,  -234,    -8,    -9,  -234,  -234,   -22,
   -10,  -188,  -189,   -11,  -186,   -12,  -234,  -234,   -13,    -1,
   -14,    -2,  -234,  -187,   -15,    -3,  -234,   -16,    -5,  -234,
  -234,   -17,    -6,  -234,   -18,    -7,  -197,  -189,  -187,  -234,
   -51,   -26,   -27,  -234,   -24,   -25,  -234,  -234,  -234,   -85,
   -92,  -197,  -234,  -196,  -194,  -197,  -190,  -192,  -193,  -222,
  -195,    -4,  -197,  -234,   -85,  -197,   -53,  -232,   -42,  -175,
   -43,  -214,  -117,   -33,  -234,  -234,   -44,   -31,   -74,   -32,
  -234,   -36,  -234,  -122,   -37,  -234,   -73,   -38,  -172,   -72,
   -39,   -40,  -174,   -41,  -234,  -103,  -111,  -234,  -132,  -112,
  -234,  -104,  -234,  -108,  -110,  -105,  -234,  -114,  -106,  -113,
  -109,  -234,  -125,  -107,  -234,  -234,   -49,  -176,  -177,  -179,
  -234,  -234,  -198,  -199,   -83,   -19,   -22,  -187,   -21,   -23,
   -82,   -84,  -234,   -75,   -86,   -81,   -70,   -74,   -76,  -220,
   -79,   -68,   -77,   -73,  -234,  -171,  -170,   -80,   -78,   -90,
   -91,   -93,  -234,  -220,  -197,   385,  -234,  -234,  -234,  -208,
  -234,   -57,  -214,  -197,   -59,  -234,   -66,   -65,   -56,   -73,
   -95,  -234,  -220,  -234,  -234,   -92,  -234,   -30,  -234,  -118,
  -234,  -234,  -234,  -234,  -234,  -142,  -234,  -149,  -234,  -217,
  -230,  -226,  -234,  -229,  -225,  -234,  -234,  -234,  -234,  -234,
  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,  -234,
  -234,  -234,  -234,  -234,  -234,  -234,   -20,  -234,  -207,  -234,
  -205,  -234,  -202,  -231,  -234,   -71,  -221,  -234,  -234,   -85,
  -234,  -221,  -234,  -234,  -234,  -210,  -191,  -234,  -209,  -234,
   -54,   -62,   -61,  -234,  -234,  -234,  -218,  -219,  -234,  -124,
  -234,   -55,  -220,  -234,  -234,   -28,  -234,  -120,  -119,   -35,
   -34,  -173,  -168,  -166,  -234,  -169,  -160,  -167,  -161,   -73,
  -234,  -123,  -116,  -234,  -152,  -219,  -215,  -234,  -234,  -223,
  -137,  -139,  -138,  -133,  -140,  -144,  -141,  -146,  -151,  -148,
  -145,  -134,  -150,  -147,  -143,  -135,  -234,  -128,  -136,  -234,
  -154,  -234,  -158,  -178,  -234,  -181,  -234,  -200,  -234,  -234,
  -201,   -45,   -69,   -87,   -46,   -88,  -220,   -89,   -94,   -48,
  -234,  -212,  -211,  -213,  -234,  -185,   -58,   -60,   -97,   -98,
   -63,  -102,   -99,  -100,  -101,   -64,   -96,   -47,  -234,  -233,
   -29,  -121,  -234,  -163,  -220,  -115,  -216,  -228,  -227,  -224,
  -128,  -127,  -234,  -234,  -155,  -153,  -234,  -234,  -180,  -206,
  -204,  -203,   -67,  -234,  -183,  -184,   -52,  -165,  -219,  -234,
  -234,  -126,  -129,  -234,  -159,  -234,  -182,  -164,  -162,  -234,
  -131,  -234,  -157,  -130,  -156 ]

racc_goto_table = [
    22,     9,    68,   112,   222,   264,    61,    36,    53,   179,
   268,   141,    70,    19,     2,    77,   191,   118,    51,    22,
     9,   139,   116,    21,    73,    91,    56,   147,   133,   149,
   115,   227,   153,     2,   300,   128,   172,   302,   135,   160,
   125,   129,   174,    22,   126,   232,   351,    43,   171,   299,
   260,   146,   369,    68,   121,   330,   335,   258,   266,   123,
   318,   344,   136,    70,   250,   119,   178,   183,   224,   154,
   233,    55,   157,    66,   123,    73,    91,   120,   159,   238,
   219,   221,   326,   322,   195,   190,    16,   188,   nil,   nil,
   nil,   nil,   nil,   264,   nil,   nil,   nil,   nil,   343,   371,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   128,   nil,   nil,    88,   nil,   216,   129,   354,
    22,   126,   302,   260,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   243,    88,   nil,   nil,   338,   nil,   nil,    53,   nil,    53,
   nil,   nil,   nil,   nil,   149,   nil,   nil,   252,   nil,   nil,
    68,   262,   nil,    68,   nil,   236,    88,   nil,   nil,   nil,
    70,   nil,   nil,    70,   nil,   nil,   273,   235,   nil,   374,
   nil,   nil,   259,    91,   146,    73,    91,   312,   348,   nil,
   341,   361,   264,   262,    87,   nil,   261,   377,   291,   303,
   nil,   316,   295,   147,   133,   313,   nil,   nil,   362,   nil,
   149,   nil,    22,     9,   135,   nil,   146,    22,     9,   nil,
   142,   nil,   nil,   328,   328,   296,     2,   146,   261,   nil,
   304,     2,   nil,    68,   nil,   nil,   370,    22,     9,   nil,
   321,   nil,   nil,    70,   nil,    87,   146,   146,   nil,   262,
   324,     2,   nil,   nil,   nil,   259,    91,   190,   261,   261,
   nil,    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   146,    88,    88,   nil,    88,   nil,   262,   nil,
   nil,   nil,   nil,    61,   261,   nil,   nil,   138,    84,   nil,
   nil,    61,   nil,   nil,   nil,   nil,    22,     9,   nil,   nil,
   166,   146,   nil,   166,    22,     9,    88,   nil,   nil,   nil,
     2,    61,    81,   261,   140,   nil,   nil,    88,     2,   nil,
    22,     9,   nil,   nil,    22,     9,   nil,   167,   nil,   372,
   167,   nil,   nil,   363,     2,   262,    88,    88,     2,    84,
   nil,    90,   nil,   nil,   nil,   nil,    88,   nil,   262,   nil,
    61,   nil,    87,   267,   nil,    87,   nil,   nil,   146,   nil,
   nil,   nil,    88,    22,     9,   nil,    61,   145,    61,   nil,
   261,   146,   nil,    22,     9,    22,     9,     2,   114,    22,
     9,    22,     9,   261,    93,   267,   379,     2,   381,     2,
   nil,    88,    90,     2,   nil,     2,   142,   132,   nil,   nil,
   nil,   166,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   148,   nil,   170,   nil,   nil,   332,   332,   nil,   nil,    81,
   263,   nil,    81,   nil,   nil,    87,   nil,   nil,   167,   nil,
   nil,   170,   nil,   nil,   nil,    93,   nil,   nil,   nil,   nil,
   nil,   267,   nil,   nil,   nil,   nil,    84,   265,    88,    84,
   nil,   170,   263,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    88,   nil,   138,   nil,   nil,   nil,   nil,   nil,   nil,
   267,   nil,   nil,   nil,   nil,   nil,   nil,   166,   124,   265,
   nil,   nil,   329,   329,   nil,   130,   131,   nil,   nil,   nil,
   140,   nil,    81,   nil,   nil,   nil,   nil,   nil,   nil,    90,
   145,   nil,    90,   nil,   167,   nil,   nil,   nil,   263,   331,
   331,   nil,   nil,   nil,   180,   nil,   nil,   nil,   nil,    84,
   nil,   nil,   nil,   nil,   nil,   253,   nil,   267,   nil,   nil,
   nil,   nil,   145,   185,   nil,   265,   186,   263,   nil,   187,
   267,   nil,    93,   145,   nil,    93,   nil,   nil,   283,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   333,   333,   265,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    90,   nil,   nil,   nil,   nil,   315,   nil,   317,
   nil,   nil,   nil,   nil,   nil,   nil,   148,   nil,   145,   nil,
   nil,   nil,   nil,   nil,   263,   nil,   nil,   336,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   334,   334,   263,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    93,   nil,   145,   nil,   nil,
   nil,   265,   nil,   nil,   nil,   nil,   347,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   265,   280,   281,   282,   nil,   284,
   285,   286,   287,   288,   289,   290,   nil,   292,   293,   294,
   nil,   nil,   298,   nil,   nil,   359,   nil,   360,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   145,   nil,   nil,
   nil,   367,   nil,   nil,   nil,   180 ]

racc_goto_check = [
    37,    21,    30,    62,    82,    68,     4,    32,    64,    60,
    70,    47,    31,     2,    52,    22,    85,    72,    32,    37,
    21,    35,     5,     3,    21,    28,    78,    50,    30,    53,
    37,    36,    38,    52,    66,     5,    35,    68,    31,    41,
    19,     7,    41,    37,    21,    36,    63,    20,    57,    65,
    23,    28,    58,    30,    74,    46,    46,    61,    69,     3,
    56,    71,    33,    31,    36,    73,    22,    57,    34,    74,
    75,    76,    77,    40,     3,    21,    28,    20,     3,    79,
    80,    81,    42,    83,    84,    30,     1,    57,   nil,   nil,
   nil,   nil,   nil,    68,   nil,   nil,   nil,   nil,    70,    63,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     5,   nil,   nil,    49,   nil,    19,     7,    66,
    37,    21,    68,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    41,    49,   nil,   nil,    36,   nil,   nil,    64,   nil,    64,
   nil,   nil,   nil,   nil,    53,   nil,   nil,    38,   nil,   nil,
    30,    30,   nil,    30,   nil,    78,    49,   nil,   nil,   nil,
    31,   nil,   nil,    31,   nil,   nil,    22,     3,   nil,    68,
   nil,   nil,    21,    28,    28,    21,    28,    47,    85,   nil,
    60,    82,    68,    30,    26,   nil,    52,    70,    64,    72,
   nil,    35,    64,    50,    30,    53,   nil,   nil,    36,   nil,
    53,   nil,    37,    21,    31,   nil,    28,    37,    21,   nil,
    26,   nil,   nil,    30,    30,     2,    52,    28,    52,   nil,
     2,    52,   nil,    30,   nil,   nil,    36,    37,    21,   nil,
    32,   nil,   nil,    31,   nil,    26,    28,    28,   nil,    30,
     2,    52,   nil,   nil,   nil,    21,    28,    30,    52,    52,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    28,    49,    49,   nil,    49,   nil,    30,   nil,
   nil,   nil,   nil,     4,    52,   nil,   nil,    24,    25,   nil,
   nil,     4,   nil,   nil,   nil,   nil,    37,    21,   nil,   nil,
    24,    28,   nil,    24,    37,    21,    49,   nil,   nil,   nil,
    52,     4,    24,    52,    25,   nil,   nil,    49,    52,   nil,
    37,    21,   nil,   nil,    37,    21,   nil,    25,   nil,    62,
    25,   nil,   nil,     2,    52,    30,    49,    49,    52,    25,
   nil,    27,   nil,   nil,   nil,   nil,    49,   nil,    30,   nil,
     4,   nil,    26,    26,   nil,    26,   nil,   nil,    28,   nil,
   nil,   nil,    49,    37,    21,   nil,     4,    27,     4,   nil,
    52,    28,   nil,    37,    21,    37,    21,    52,    54,    37,
    21,    37,    21,    52,    29,    26,     2,    52,     2,    52,
   nil,    49,    27,    52,   nil,    52,    26,    54,   nil,   nil,
   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,   nil,    54,   nil,   nil,    26,    26,   nil,   nil,    24,
    24,   nil,    24,   nil,   nil,    26,   nil,   nil,    25,   nil,
   nil,    54,   nil,   nil,   nil,    29,   nil,   nil,   nil,   nil,
   nil,    26,   nil,   nil,   nil,   nil,    25,    25,    49,    25,
   nil,    54,    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,
    26,   nil,   nil,   nil,   nil,   nil,   nil,    24,    51,    25,
   nil,   nil,    24,    24,   nil,    51,    51,   nil,   nil,   nil,
    25,   nil,    24,   nil,   nil,   nil,   nil,   nil,   nil,    27,
    27,   nil,    27,   nil,    25,   nil,   nil,   nil,    24,    25,
    25,   nil,   nil,   nil,    51,   nil,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,    54,   nil,    26,   nil,   nil,
   nil,   nil,    27,    51,   nil,    25,    51,    24,   nil,    51,
    26,   nil,    29,    27,   nil,    29,   nil,   nil,    54,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    27,    27,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    27,   nil,   nil,   nil,   nil,    54,   nil,    54,
   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,    27,   nil,
   nil,   nil,   nil,   nil,    24,   nil,   nil,    54,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    29,    29,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    29,   nil,    27,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,    51,    51,    51,   nil,    51,
    51,    51,    51,    51,    51,    51,   nil,    51,    51,    51,
   nil,   nil,    51,   nil,   nil,    54,   nil,    54,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,
   nil,    54,   nil,   nil,   nil,    51 ]

racc_goto_pointer = [
   nil,    86,    13,    23,   -13,    -8,   nil,    -2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -3,
    43,     1,    -8,  -131,   238,   265,   171,   318,     2,   361,
   -21,   -11,     6,    13,   -68,   -28,  -108,     0,   -18,   nil,
    51,   -23,  -157,   nil,   nil,   nil,  -189,   -38,   nil,    92,
   -22,   439,    14,   -21,   349,   nil,  -171,   -15,  -292,   nil,
   -66,  -123,   -23,  -251,    -9,  -165,  -180,   nil,  -177,  -124,
  -172,  -209,   -16,    32,    18,   -84,    54,    17,     9,   -79,
   -42,   -41,  -118,  -151,   -22,   -90,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   168,    25,    28,    32,    35,     5,     6,
    10,    13,    15,    18,    20,    24,    27,    31,    34,     4,
   nil,    99,   nil,    79,   101,   103,   105,   108,   109,   113,
    95,    96,     8,   nil,   nil,   nil,   nil,    85,   nil,    30,
   nil,   nil,   161,   239,   164,   165,   nil,   nil,   144,   107,
   110,   111,    67,   134,    98,   150,   151,   nil,   248,   104,
   nil,   nil,   nil,   nil,    69,   nil,   nil,   301,    80,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,
   nil,   nil,   nil,   nil,   nil,   nil,   192 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_1,
  1, 70, :_reduce_none,
  1, 71, :_reduce_none,
  2, 71, :_reduce_4,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  3, 87, :_reduce_19,
  3, 87, :_reduce_20,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  4, 81, :_reduce_28,
  5, 81, :_reduce_29,
  3, 81, :_reduce_30,
  2, 81, :_reduce_31,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 91, :_reduce_34,
  3, 91, :_reduce_35,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_44,
  5, 74, :_reduce_45,
  5, 74, :_reduce_46,
  5, 74, :_reduce_47,
  5, 85, :_reduce_48,
  2, 75, :_reduce_49,
  1, 108, :_reduce_50,
  2, 108, :_reduce_51,
  6, 76, :_reduce_52,
  2, 76, :_reduce_53,
  3, 109, :_reduce_54,
  3, 109, :_reduce_55,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  3, 110, :_reduce_58,
  1, 111, :_reduce_none,
  3, 111, :_reduce_60,
  1, 112, :_reduce_61,
  1, 112, :_reduce_62,
  3, 113, :_reduce_63,
  3, 113, :_reduce_64,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  4, 116, :_reduce_67,
  1, 102, :_reduce_none,
  3, 102, :_reduce_69,
  0, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 118, :_reduce_72,
  1, 93, :_reduce_73,
  1, 95, :_reduce_74,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  3, 77, :_reduce_82,
  3, 77, :_reduce_83,
  3, 86, :_reduce_84,
  0, 104, :_reduce_85,
  1, 104, :_reduce_86,
  3, 104, :_reduce_87,
  3, 122, :_reduce_88,
  3, 124, :_reduce_89,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  0, 107, :_reduce_92,
  1, 107, :_reduce_93,
  3, 107, :_reduce_94,
  1, 126, :_reduce_none,
  3, 126, :_reduce_96,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  4, 97, :_reduce_115,
  3, 97, :_reduce_116,
  1, 99, :_reduce_117,
  2, 99, :_reduce_118,
  2, 129, :_reduce_119,
  1, 130, :_reduce_120,
  2, 130, :_reduce_121,
  1, 96, :_reduce_122,
  4, 90, :_reduce_123,
  4, 90, :_reduce_124,
  2, 79, :_reduce_125,
  5, 131, :_reduce_126,
  4, 131, :_reduce_127,
  0, 132, :_reduce_none,
  2, 132, :_reduce_129,
  4, 132, :_reduce_130,
  3, 132, :_reduce_131,
  1, 120, :_reduce_none,
  3, 120, :_reduce_133,
  3, 120, :_reduce_134,
  3, 120, :_reduce_135,
  3, 120, :_reduce_136,
  3, 120, :_reduce_137,
  3, 120, :_reduce_138,
  3, 120, :_reduce_139,
  3, 120, :_reduce_140,
  3, 120, :_reduce_141,
  2, 120, :_reduce_142,
  3, 120, :_reduce_143,
  3, 120, :_reduce_144,
  3, 120, :_reduce_145,
  3, 120, :_reduce_146,
  3, 120, :_reduce_147,
  3, 120, :_reduce_148,
  2, 120, :_reduce_149,
  3, 120, :_reduce_150,
  3, 120, :_reduce_151,
  3, 120, :_reduce_152,
  5, 78, :_reduce_153,
  1, 134, :_reduce_none,
  2, 134, :_reduce_155,
  5, 135, :_reduce_156,
  4, 135, :_reduce_157,
  1, 136, :_reduce_none,
  3, 136, :_reduce_159,
  3, 98, :_reduce_160,
  1, 138, :_reduce_none,
  4, 138, :_reduce_162,
  1, 140, :_reduce_none,
  3, 140, :_reduce_164,
  3, 139, :_reduce_165,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_174,
  1, 137, :_reduce_none,
  1, 141, :_reduce_176,
  1, 142, :_reduce_none,
  3, 142, :_reduce_178,
  2, 80, :_reduce_179,
  6, 82, :_reduce_180,
  5, 82, :_reduce_181,
  7, 83, :_reduce_182,
  6, 83, :_reduce_183,
  6, 84, :_reduce_184,
  5, 84, :_reduce_185,
  1, 106, :_reduce_186,
  1, 101, :_reduce_187,
  1, 101, :_reduce_188,
  1, 101, :_reduce_189,
  1, 145, :_reduce_none,
  3, 145, :_reduce_191,
  1, 147, :_reduce_192,
  1, 148, :_reduce_193,
  1, 148, :_reduce_194,
  1, 148, :_reduce_195,
  1, 148, :_reduce_none,
  0, 72, :_reduce_197,
  0, 149, :_reduce_198,
  1, 143, :_reduce_none,
  3, 143, :_reduce_200,
  3, 143, :_reduce_201,
  1, 150, :_reduce_none,
  3, 150, :_reduce_203,
  3, 151, :_reduce_204,
  1, 151, :_reduce_205,
  3, 151, :_reduce_206,
  1, 151, :_reduce_207,
  1, 146, :_reduce_none,
  2, 146, :_reduce_209,
  1, 144, :_reduce_none,
  2, 144, :_reduce_211,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 94, :_reduce_214,
  3, 119, :_reduce_215,
  4, 119, :_reduce_216,
  2, 119, :_reduce_217,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  0, 105, :_reduce_none,
  1, 105, :_reduce_221,
  1, 133, :_reduce_222,
  3, 128, :_reduce_223,
  4, 128, :_reduce_224,
  2, 128, :_reduce_225,
  1, 153, :_reduce_none,
  3, 153, :_reduce_227,
  3, 154, :_reduce_228,
  1, 155, :_reduce_229,
  1, 155, :_reduce_230,
  4, 121, :_reduce_231,
  1, 100, :_reduce_none,
  4, 100, :_reduce_233 ]

racc_reduce_n = 234

racc_shift_n = 385

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSNAME => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSNAME",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "$start",
  "program",
  "statements",
  "nil",
  "statement",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "relationship_side",
  "edge",
  "resourceref",
  "funcvalues",
  "namestring",
  "name",
  "variable",
  "type",
  "boolean",
  "funcrvalue",
  "selector",
  "quotedtext",
  "hasharrayaccesses",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "classref",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "simplervalue",
  "resourceinst",
  "resourcename",
  "undef",
  "array",
  "expression",
  "hasharrayaccess",
  "param",
  "rvalue",
  "addparam",
  "anyparam",
  "rvalues",
  "comma",
  "hash",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.ra', 31)
  def _reduce_1(val, _values, result)
      if val[0]
    # Make sure we always return an array.
    if val[0].is_a?(AST::ASTArray)
      if val[0].children.empty?
        result = nil
      else
        result = val[0]
      end
    else
      result = aryfy(val[0])
    end
  else
    result = nil
  end

    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'grammar.ra', 50)
  def _reduce_4(val, _values, result)
        if val[0] and val[1]
    if val[0].instance_of?(AST::ASTArray)
      val[0].push(val[1])
      result = val[0]
    else
      result = ast AST::ASTArray, :children => [val[0],val[1]]
    end
  elsif obj = (val[0] || val[1])
    result = obj
  else result = nil
  end

    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'grammar.ra', 80)
  def _reduce_19(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 83)
  def _reduce_20(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.ra', 91)
  def _reduce_28(val, _values, result)
      args = aryfy(val[2])
  result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => args,
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 99)
  def _reduce_29(val, _values, result)
      args = aryfy(val[2])
  result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => args,
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 106)
  def _reduce_30(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 113)
  def _reduce_31(val, _values, result)
        args = aryfy(val[1])
    result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => args,
    :ftype => :statement

    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'grammar.ra', 124)
  def _reduce_34(val, _values, result)
        result = aryfy(val[0], val[2])
    result.line = @lexer.line
    result.file = @lexer.file

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 129)
  def _reduce_35(val, _values, result)
        unless val[0].is_a?(AST::ASTArray)
    val[0] = aryfy(val[0])
  end

  val[0].push(val[2])

  result = val[0]

    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'grammar.ra', 149)
  def _reduce_44(val, _values, result)
        result = ast AST::Name, :value => val[0][:value]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 153)
  def _reduce_45(val, _values, result)
      @lexer.commentpop
  array = val[2]
  array = [array] if array.instance_of?(AST::ResourceInstance)
  result = ast AST::ASTArray

  # this iterates across each specified resourceinstance
  array.each { |instance|
    raise Puppet::Dev, "Got something that isn't an instance" unless instance.instance_of?(AST::ResourceInstance)
    # now, i need to somehow differentiate between those things with
    # arrays in their names, and normal things

      result.push ast(
        AST::Resource,
      :type => val[0],
      :title => instance[0],

      :parameters => instance[1])
  }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 172)
  def _reduce_46(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 175)
  def _reduce_47(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0], :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 182)
  def _reduce_48(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 189)
  def _reduce_49(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs]) and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resources as exported and pass them through.
  if val[1].instance_of?(AST::ASTArray)
    val[1].each do |obj|
      obj.send(method, true)
    end
  else
    val[1].send(method, true)
  end

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 211)
  def _reduce_50(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 212)
  def _reduce_51(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 217)
  def _reduce_52(val, _values, result)
      @lexer.commentpop
  Puppet.warning addcontext("Collection names must now be capitalized") if val[0] =~ /^[a-z]/
  type = val[0].downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 236)
  def _reduce_53(val, _values, result)
        if val[0] =~ /^[a-z]/
    Puppet.warning addcontext("Collection names must now be capitalized")
  end
  type = val[0].downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs] and ! Puppet[:parseonly]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 257)
  def _reduce_54(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 265)
  def _reduce_55(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'grammar.ra', 278)
  def _reduce_58(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 59 omitted

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_60(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 287)
  def _reduce_61(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 288)
  def _reduce_62(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 291)
  def _reduce_63(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 296)
  def _reduce_64(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'grammar.ra', 305)
  def _reduce_67(val, _values, result)
      result = ast AST::ResourceInstance, :children => [val[0],val[2]]

    result
  end
.,.,

# reduce 68 omitted

module_eval(<<'.,.,', 'grammar.ra', 310)
  def _reduce_69(val, _values, result)
        if val[0].instance_of?(AST::ResourceInstance)
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  else
    val[0].push val[2]
    result = val[0]
  end

    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'grammar.ra', 322)
  def _reduce_72(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 326)
  def _reduce_73(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 330)
  def _reduce_74(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'grammar.ra', 342)
  def _reduce_82(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 348)
  def _reduce_83(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 352)
  def _reduce_84(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 358)
  def _reduce_85(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 360)
  def _reduce_86(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 362)
  def _reduce_87(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 371)
  def _reduce_88(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 375)
  def _reduce_89(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_92(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 386)
  def _reduce_93(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 388)
  def _reduce_94(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.ra', 398)
  def _reduce_96(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    result = val[0].push(val[2])
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'grammar.ra', 427)
  def _reduce_115(val, _values, result)
      args = aryfy(val[2])
  result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => args,
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 433)
  def _reduce_116(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 439)
  def _reduce_117(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 440)
  def _reduce_118(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 442)
  def _reduce_119(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 444)
  def _reduce_120(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 445)
  def _reduce_121(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 448)
  def _reduce_122(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 452)
  def _reduce_123(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 455)
  def _reduce_124(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 459)
  def _reduce_125(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 463)
  def _reduce_126(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 474)
  def _reduce_127(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 128 omitted

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_129(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_130(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 494)
  def _reduce_131(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 132 omitted

module_eval(<<'.,.,', 'grammar.ra', 512)
  def _reduce_133(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 515)
  def _reduce_134(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 518)
  def _reduce_135(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 521)
  def _reduce_136(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 524)
  def _reduce_137(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 527)
  def _reduce_138(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 530)
  def _reduce_139(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 533)
  def _reduce_140(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 536)
  def _reduce_141(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_142(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 542)
  def _reduce_143(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 545)
  def _reduce_144(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 548)
  def _reduce_145(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 551)
  def _reduce_146(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 554)
  def _reduce_147(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 557)
  def _reduce_148(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 560)
  def _reduce_149(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 563)
  def _reduce_150(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_151(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 569)
  def _reduce_152(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 573)
  def _reduce_153(val, _values, result)
      @lexer.commentpop
  options = val[3]
  options = ast AST::ASTArray, :children => [val[3]] unless options.instance_of?(AST::ASTArray)
  result = ast AST::CaseStatement, :test => val[1], :options => options

    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'grammar.ra', 581)
  def _reduce_155(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push val[1]
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0], val[1]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 590)
  def _reduce_156(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 593)
  def _reduce_157(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

# reduce 158 omitted

module_eval(<<'.,.,', 'grammar.ra', 605)
  def _reduce_159(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 614)
  def _reduce_160(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 161 omitted

module_eval(<<'.,.,', 'grammar.ra', 619)
  def _reduce_162(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 163 omitted

module_eval(<<'.,.,', 'grammar.ra', 625)
  def _reduce_164(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 634)
  def _reduce_165(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'grammar.ra', 646)
  def _reduce_174(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 175 omitted

module_eval(<<'.,.,', 'grammar.ra', 651)
  def _reduce_176(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 177 omitted

module_eval(<<'.,.,', 'grammar.ra', 653)
  def _reduce_178(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 656)
  def _reduce_179(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = AST::ASTArray.new(:children => [])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 666)
  def _reduce_180(val, _values, result)
      @lexer.commentpop
  newdefine classname(val[1]), :arguments => val[2], :code => val[4], :line => val[0][:line]
  @lexer.indefine = false
  result = nil

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 673)
  def _reduce_181(val, _values, result)
      @lexer.commentpop
  newdefine classname(val[1]), :arguments => val[2], :line => val[0][:line]
  @lexer.indefine = false
  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 681)
  def _reduce_182(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  newclass classname(val[1]), :arguments => val[2], :parent => val[3], :code => val[5], :line => val[0][:line]
  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 687)
  def _reduce_183(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  newclass classname(val[1]), :arguments => val[2], :parent => val[3], :line => val[0][:line]
  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 695)
  def _reduce_184(val, _values, result)
      @lexer.commentpop
  newnode val[1], :parent => val[2], :code => val[4], :line => val[0][:line]
  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 699)
  def _reduce_185(val, _values, result)
      @lexer.commentpop
  newnode val[1], :parent => val[2], :line => val[0][:line]
  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 704)
  def _reduce_186(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 706)
  def _reduce_187(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 707)
  def _reduce_188(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 708)
  def _reduce_189(val, _values, result)
     result = "class" 
    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_191(val, _values, result)
        result = val[0]
    result = [result] unless result.is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 720)
  def _reduce_192(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 723)
  def _reduce_193(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 724)
  def _reduce_194(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_195(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 196 omitted

module_eval(<<'.,.,', 'grammar.ra', 729)
  def _reduce_197(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 733)
  def _reduce_198(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 199 omitted

module_eval(<<'.,.,', 'grammar.ra', 738)
  def _reduce_200(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 741)
  def _reduce_201(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 202 omitted

module_eval(<<'.,.,', 'grammar.ra', 747)
  def _reduce_203(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 753)
  def _reduce_204(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 757)
  def _reduce_205(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 760)
  def _reduce_206(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 762)
  def _reduce_207(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 208 omitted

module_eval(<<'.,.,', 'grammar.ra', 767)
  def _reduce_209(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 210 omitted

module_eval(<<'.,.,', 'grammar.ra', 772)
  def _reduce_211(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'grammar.ra', 778)
  def _reduce_214(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 782)
  def _reduce_215(val, _values, result)
      if val[1].instance_of?(AST::ASTArray)
    result = val[1]
  else
    result = ast AST::ASTArray, :children => [val[1]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 789)
  def _reduce_216(val, _values, result)
        if val[1].instance_of?(AST::ASTArray)
    result = val[1]
  else
    result = ast AST::ASTArray, :children => [val[1]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 795)
  def _reduce_217(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'grammar.ra', 802)
  def _reduce_221(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 805)
  def _reduce_222(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 809)
  def _reduce_223(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 816)
  def _reduce_224(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 822)
  def _reduce_225(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 226 omitted

module_eval(<<'.,.,', 'grammar.ra', 827)
  def _reduce_227(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 836)
  def _reduce_228(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 839)
  def _reduce_229(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 840)
  def _reduce_230(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 843)
  def _reduce_231(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 232 omitted

module_eval(<<'.,.,', 'grammar.ra', 848)
  def _reduce_233(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
